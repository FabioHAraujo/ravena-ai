const path = require('path');
const Logger = require('../utils/Logger');
const Database = require('../utils/Database');
const Command = require('../models/Command');
const ReturnMessage = require('../models/ReturnMessage');
const fs = require('fs').promises;

const logger = new Logger('donation-commands');
const database = Database.getInstance();

//logger.info('M√≥dulo DonationCommands carregado');

/**
 * L√™ o arquivo de cabe√ßalho dos donates
 * @returns {Promise<string>} - Conte√∫do do cabe√ßalho
 */
async function readDonationHeader() {
  try {
    const headerPath = path.join(database.databasePath, 'textos', 'donate_header.txt');
    const headerContent = await fs.readFile(headerPath, 'utf8');
    return headerContent;
  } catch (error) {
    logger.warn('Erro ao ler cabe√ßalho do donate:', error);
    return 'üíñ *Ajuda de custos _ravenabot_!* üê¶‚Äç‚¨õ\n\n';
  }
}

/**
 * L√™ o arquivo de rodap√© dos donates
 * @returns {Promise<string>} - Conte√∫do do rodap√©
 */
async function readDonationFooter() {
  try {
    const headerPath = path.join(database.databasePath, 'textos', 'donate_footer.txt');
    const headerContent = await fs.readFile(headerPath, 'utf8');
    return headerContent;
  } catch (error) {
    logger.warn('Erro ao ler footer do donate:', error);
    return '';
  }
}


/**
 * Mostra status da meta de doa√ß√£o (se configurada)
 * @param {WhatsAppBot} bot - Inst√¢ncia do bot
 * @param {Object} message - Dados da mensagem
 * @param {Array} args - Argumentos do comando
 * @param {Object} group - Dados do grupo
 * @returns {Promise<ReturnMessage>} - ReturnMessage com informa√ß√µes da meta
 */
async function showDonationGoal(bot, message, args, group) {
  try {
    const chatId = message.group || message.author;
    
    // Verifica se a meta de doa√ß√£o est√° configurada
    const goalAmount = process.env.DONATION_GOAL_AMOUNT;
    const goalDescription = process.env.DONATION_GOAL_DESCRIPTION;
    
    if (!goalAmount || isNaN(parseFloat(goalAmount))) {
      return new ReturnMessage({
        chatId: chatId,
        content: 'Nenhuma meta de doa√ß√£o est√° definida atualmente.'
      });
    }
    
    // Obt√©m todas as doa√ß√µes
    const donations = await database.getDonations();
    
    // Calcula total de doa√ß√µes
    const totalAmount = donations.reduce((total, donation) => total + donation.valor, 0);
    
    // Calcula porcentagem
    const goalAmountNum = parseFloat(goalAmount);
    const percentage = Math.min(100, Math.floor((totalAmount / goalAmountNum) * 100));
    
    // Cria barra de progresso
    const barLength = 20;
    const filledLength = Math.floor((percentage / 100) * barLength);
    const progressBar = '‚ñà'.repeat(filledLength) + '‚ñë'.repeat(barLength - filledLength);
    
    // Constr√≥i mensagem
    let goalMsg = 
      `üéØ *Meta de Doa√ß√£o* üéØ\n\n` +
      `Atual: R$${totalAmount.toFixed(2)} / Meta: R$${goalAmountNum.toFixed(2)}\n` +
      `[${progressBar}] ${percentage}%\n\n`;
    
    if (goalDescription) {
      goalMsg += `*Meta:* ${goalDescription}\n\n`;
    }
    
    goalMsg += `Use !donate ou !doar para nos ajudar a alcan√ßar nossa meta!`;
    
    logger.debug('Informa√ß√µes de meta de doa√ß√£o enviadas com sucesso');
    
    return new ReturnMessage({
      chatId: chatId,
      content: goalMsg
    });
  } catch (error) {
    logger.error('Erro ao enviar informa√ß√µes de meta de doa√ß√£o:', error);
    const chatId = message.group || message.author;
    
    return new ReturnMessage({
      chatId: chatId,
      content: 'Erro ao recuperar informa√ß√µes de meta de doa√ß√£o. Por favor, tente novamente.'
    });
  }
}

/**
 * Mostra lista dos principais doadores
 * @param {WhatsAppBot} bot - Inst√¢ncia do bot
 * @param {Object} message - Dados da mensagem
 * @param {Array} args - Argumentos do comando
 * @param {Object} group - Dados do grupo
 * @returns {Promise<ReturnMessage>} - ReturnMessage com lista de doadores
 */
async function showTopDonors(bot, message, args, group) {
  try {
    const chatId = message.group || message.author;
    
    // Obt√©m todas as doa√ß√µes
    const donations = await database.getDonations();
    
    if (!donations || donations.length === 0) {
      return new ReturnMessage({
        chatId: chatId,
        content: 'Nenhuma doa√ß√£o foi recebida ainda. Seja o primeiro a doar!'
      });
    }
    
    // Ordena doa√ß√µes por valor (maior primeiro)
    donations.sort((a, b) => b.valor - a.valor);
    
    // Limita aos 1000 principais doadores
    const topDonors = donations.slice(0, 1000);
    
    // Calcula total de doa√ß√µes
    const totalAmount = donations.reduce((total, donation) => total + donation.valor, 0);
    
    const donationLink = process.env.DONATION_LINK || 'https://tipa.ai/seunome';

    // Constr√≥i mensagem
    let donorsMsg = await readDonationHeader();
    
    topDonors.forEach((donor, index) => {
      let emjNumero = (donor.numero?.length > 5) ? "" : " ‚ùóÔ∏è";
      donorsMsg += `${index + 1}. *${donor.nome}*: R$${donor.valor.toFixed(2)}${emjNumero}\n`;
    });
    
    donorsMsg += await readDonationFooter();

    
    logger.debug('Lista de principais doadores enviada com sucesso');
    
    return new ReturnMessage({
      chatId: chatId,
      content: donorsMsg
    });
  } catch (error) {
    logger.error('Erro ao enviar lista de principais doadores:', error);
    const chatId = message.group || message.author;
    
    return new ReturnMessage({
      chatId: chatId,
      content: 'Erro ao recuperar informa√ß√µes de doadores. Por favor, tente novamente.'
    });
  }
}

// Lista de comandos usando a classe Command
const commands = [
  new Command({
    name: 'doar',
    description: 'Mostra informa√ß√µes de doa√ß√£o e link',
    category: "geral",
    method: showTopDonors
  }),
  new Command({
    name: 'doadores',
    description: 'Mostra informa√ß√µes de doa√ß√£o e link',
    category: "geral",
    method: showTopDonors
  }),
  new Command({
    name: 'donate',
    description: 'Mostra informa√ß√µes de doa√ß√£o e link',
    category: "geral",
    method: showTopDonors,
    hidden: true
  })
];


module.exports = { commands };