const path = require('path');
const Logger = require('../utils/Logger');
const ReturnMessage = require('../models/ReturnMessage');
const Command = require('../models/Command');
const Database = require('../utils/Database');

const logger = new Logger('anonymous-message');
const database = Database.getInstance();

// Constantes
const COOLDOWN_HOURS = 12; // Cooldown de 12 horas
const COOLDOWN_MS = COOLDOWN_HOURS * 60 * 60 * 1000; // Cooldown em milissegundos

// Armazena √∫ltimos usos por usu√°rio
const lastUsedTimes = {};

/**
 * Envia uma mensagem an√¥nima para um grupo
 * @param {WhatsAppBot} bot - Inst√¢ncia do bot
 * @param {Object} message - Dados da mensagem
 * @param {Array} args - Argumentos do comando
 * @param {Object} group - Dados do grupo
 * @returns {Promise<ReturnMessage>} Mensagem de retorno
 */
async function anonymousMessage(bot, message, args, group) {
  try {
    // Verifica o ID do remetente
    const senderId = message.author;
    
    // Verifica se h√° argumentos suficientes
    if (args.length < 2) {
      return new ReturnMessage({
        chatId: senderId,
        content: '‚ö†Ô∏è Formato incorreto. Use: !anonimo [idGrupo] mensagem\n\nExemplo: !anonimo grupoteste Ol√°, esta √© uma mensagem an√¥nima!'
      });
    }
    
    // Verifica cooldown
    const now = Date.now();
    if (lastUsedTimes[senderId] && (now - lastUsedTimes[senderId]) < COOLDOWN_MS) {
      const timeLeft = Math.ceil((COOLDOWN_MS - (now - lastUsedTimes[senderId])) / (1000 * 60 * 60));
      return new ReturnMessage({
        chatId: senderId,
        content: `‚è≥ Voc√™ precisa esperar ${timeLeft} hora(s) para enviar outra mensagem an√¥nima.`
      });
    }
    
    // Obt√©m o ID do grupo alvo
    const targetGroupName = args[0].toLowerCase();
    
    // Obt√©m a mensagem a ser enviada
    const anonymousText = args.slice(1).join(' ');
    
    // Verifica se a mensagem √© muito curta
    if (anonymousText.length < 5) {
      return new ReturnMessage({
        chatId: senderId,
        content: '‚ö†Ô∏è A mensagem √© muito curta. Por favor, escreva algo mais substancial.'
      });
    }
    
    // Obt√©m todos os grupos para verificar o alvo
    const groups = await database.getGroups();
    
    // Encontra o grupo pelo nome ou ID
    const targetGroup = groups.find(g => 
      (g.name && g.name.toLowerCase() === targetGroupName) || 
      (g.id && g.id.toLowerCase().includes(targetGroupName))
    );
    
    if (!targetGroup) {
      return new ReturnMessage({
        chatId: senderId,
        content: `‚ùå Grupo "${targetGroupName}" n√£o encontrado. Verifique o nome e tente novamente.`
      });
    }
    
    // Verifica se o grupo existe e se o bot est√° no grupo
    try {
      await bot.client.getChatById(targetGroup.id);
    } catch (error) {
      return new ReturnMessage({
        chatId: senderId,
        content: `‚ùå N√£o foi poss√≠vel acessar o grupo. O bot pode n√£o estar mais nele ou o grupo foi exclu√≠do.`
      });
    }
    
    // Verifica se o usu√°rio est√° no grupo (opcional, pode remover esta verifica√ß√£o)
    /*
    try {
      const chat = await bot.client.getChatById(targetGroup.id);
      const participants = await chat.participants;
      
      const isUserInGroup = participants.some(
        p => p.id._serialized === senderId
      );
      
      if (!isUserInGroup) {
        return new ReturnMessage({
          chatId: senderId,
          content: `‚ùå Voc√™ n√£o √© membro do grupo "${targetGroup.name}". Apenas membros podem enviar mensagens an√¥nimas.`
        });
      }
    } catch (error) {
      logger.error('Erro ao verificar participantes do grupo:', error);
    }
    */
    
    // Registra o uso do comando para controle de cooldown
    lastUsedTimes[senderId] = now;
    
    // Mant√©m um registro para moderar abusos (opcional)
    try {
      // Obt√©m vari√°veis personalizadas
      const customVariables = await database.getCustomVariables();
      
      // Inicializa registros de mensagens an√¥nimas se n√£o existir
      if (!customVariables.anonymousMessages) {
        customVariables.anonymousMessages = [];
      }
      
      // Adiciona registro
      customVariables.anonymousMessages.push({
        senderId,
        targetGroupId: targetGroup.id,
        targetGroupName: targetGroup.name,
        message: anonymousText,
        timestamp: now
      });
      
      // Limita o hist√≥rico a 100 mensagens
      if (customVariables.anonymousMessages.length > 100) {
        customVariables.anonymousMessages = customVariables.anonymousMessages.slice(-100);
      }
      
      // Salva vari√°veis atualizadas
      await database.saveCustomVariables(customVariables);
    } catch (error) {
      logger.error('Erro ao registrar mensagem an√¥nima:', error);
    }
    
    // Envia a mensagem para o grupo alvo
    try {
      // Formata a mensagem an√¥nima
      const formattedMessage = `üëª *Um membro an√¥nimo enviou:*\n\n"${anonymousText}"`;
      
      // Envia para o grupo alvo
      await bot.sendMessage(targetGroup.id, formattedMessage);
      
      // Confirma o envio para o remetente
      return new ReturnMessage({
        chatId: senderId,
        content: `‚úÖ Sua mensagem an√¥nima foi enviada com sucesso para o grupo "${targetGroup.name}".\n\nVoc√™ poder√° enviar outra mensagem an√¥nima em ${COOLDOWN_HOURS} horas.`
      });
    } catch (error) {
      logger.error('Erro ao enviar mensagem an√¥nima:', error);
      
      return new ReturnMessage({
        chatId: senderId,
        content: `‚ùå Erro ao enviar mensagem an√¥nima: ${error.message}`
      });
    }
  } catch (error) {
    logger.error('Erro no comando de mensagem an√¥nima:', error);
    
    return new ReturnMessage({
      chatId: message.author,
      content: '‚ùå Ocorreu um erro ao processar sua solicita√ß√£o. Por favor, tente novamente.'
    });
  }
}

// Criar comando
const commands = [
  new Command({
    name: 'anonimo',
    description: 'Envia uma mensagem an√¥nima para um grupo',
    category: "jogos",
    cooldown: 0, // O cooldown √© gerenciado internamente
    reactions: {
      before: "üì®",
      after: "üëª",
      error: "‚ùå"
    },
    method: anonymousMessage
  })
];

module.exports = { commands };