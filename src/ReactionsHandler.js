const Logger = require('./utils/Logger');

/**
 * Trata rea√ß√µes a mensagens e executa comandos correspondentes
 */
class ReactionsHandler {
  constructor() {
    this.logger = new Logger('reaction-handler');
    
    // Mapa de emojis de rea√ß√£o para nomes de comandos
    this.reactionCommands = {
      'üñº': 'sticker',     // Comando de sticker
      '‚úÇÔ∏è': 'stickerbg',   // Sticker com remo√ß√£o de fundo
      'ü™ì': 'removebg',    // Remover fundo
      'ü§ñ': 'ai',          // Resposta de IA
      'ü§™': 'distort',     // Efeito de distor√ß√£o
      'üìù': 'sketch',      // Efeito de esbo√ßo
      'üé≠': 'neon',        // Efeito neon
      'üß©': 'pixelate',    // Efeito de pixeliza√ß√£o
      'üñåÔ∏è': 'oil'         // Efeito de pintura a √≥leo
    };
  }

  /**
   * Processa uma rea√ß√£o a uma mensagem
   * @param {WhatsAppBot} bot - A inst√¢ncia do bot
   * @param {Object} reaction - Os dados da rea√ß√£o
   * @returns {Promise<boolean>} - Se a rea√ß√£o foi tratada
   */
  async processReaction(bot, reaction) {
    try {
      this.logger.info(`Processando rea√ß√£o: ${reaction.emoji} de ${reaction.senderId} na mensagem ${reaction.messageId}`);
      
      // Verifica se este emoji mapeia para um comando
      const commandName = this.reactionCommands[reaction.emoji];
      if (!commandName) {
        this.logger.debug(`Nenhum comando mapeado para o emoji: ${reaction.emoji}`);
        return false;
      }
      
      // Obt√©m a mensagem que recebeu a rea√ß√£o
      const message = await bot.client.getMessage(reaction.messageId);
      if (!message) {
        this.logger.warn(`N√£o foi poss√≠vel encontrar mensagem com ID: ${reaction.messageId}`);
        return false;
      }
      
      // Cria um objeto de mensagem formatado
      const formattedMessage = await bot.formatMessage(message);
      
      // Encontra e executa o comando
      const command = bot.eventHandler.commandHandler.fixedCommands.getCommand(commandName);
      if (command) {
        this.logger.info(`Executando comando ${commandName} via rea√ß√£o ${reaction.emoji}`);
        
        // Extrai argumentos do conte√∫do da mensagem, se dispon√≠vel
        const msgText = formattedMessage.type === 'text' ? formattedMessage.content : formattedMessage.caption;
        const args = msgText ? msgText.trim().split(/\s+/) : [];
        
        // Obt√©m dados do grupo
        let group = null;
        if (formattedMessage.group) {
          group = await bot.eventHandler.getOrCreateGroup(formattedMessage.group);
        }
        
        // Executa o comando
        await bot.eventHandler.commandHandler.executeFixedCommand(bot, formattedMessage, command, args, group);
        return true;
      } else {
        this.logger.warn(`Comando ${commandName} mapeado do emoji ${reaction.emoji} n√£o encontrado`);
      }
      
      return false;
    } catch (error) {
      this.logger.error('Erro ao processar rea√ß√£o:', error);
      return false;
    }
  }
}

module.exports = ReactionsHandler;