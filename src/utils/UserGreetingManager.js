const path = require('path');
const fs = require('fs').promises;
const Logger = require('../utils/Logger');
const Database = require('../utils/Database');

class UserGreetingManager {
  constructor() {
    this.logger = new Logger('user-greeting');
    this.database = Database.getInstance();
    this.greetedUsers = {};
    this.greetedUsersPath = path.join(this.database.databasePath, 'greeted-ids.json');
    this.greetingTextPath = path.join(this.database.databasePath, 'textos', 'bot-greeting.txt');
    
    // Carrega os usu√°rios j√° saudados na inicializa√ß√£o
    this.loadGreetedUsers();
  }
  
  /**
   * Carrega a lista de usu√°rios j√° saudados do arquivo
   */
  async loadGreetedUsers() {
    try {
      try {
        const data = await fs.readFile(this.greetedUsersPath, 'utf8');
        this.greetedUsers = JSON.parse(data);
        this.logger.info(`Carregados ${Object.keys(this.greetedUsers).length} usu√°rios j√° saudados`);
      } catch (error) {
        if (error.code !== 'ENOENT') {
          this.logger.error('Erro ao carregar usu√°rios saudados:', error);
        } else {
          this.logger.info('Arquivo de usu√°rios saudados n√£o encontrado, iniciando com lista vazia');
        }
        this.greetedUsers = {};
      }
    } catch (error) {
      this.logger.error('Erro ao inicializar usu√°rios saudados:', error);
      this.greetedUsers = {};
    }
  }
  
  /**
   * Salva a lista de usu√°rios saudados no arquivo
   */
  async saveGreetedUsers() {
    try {
      // Cria o diret√≥rio se n√£o existir
      const dir = path.dirname(this.greetedUsersPath);
      await fs.mkdir(dir, { recursive: true }).catch(() => {});
      
      await fs.writeFile(this.greetedUsersPath, JSON.stringify(this.greetedUsers, null, 2));
      this.logger.debug('Usu√°rios saudados salvos com sucesso');
    } catch (error) {
      this.logger.error('Erro ao salvar usu√°rios saudados:', error);
    }
  }
  
  /**
   * Verifica se um usu√°rio j√° foi saudado recentemente
   * @param {string} userId - ID do usu√°rio
   * @returns {boolean} - True se o usu√°rio j√° foi saudado recentemente
   */
  wasGreetedRecently(userId) {
    if (!this.greetedUsers[userId]) {
      return false;
    }
    
    const lastGreeted = this.greetedUsers[userId];
    const now = Date.now();
    const oneWeekMs = 7 * 24 * 60 * 60 * 1000; // Uma semana em milissegundos
    
    return (now - lastGreeted) < oneWeekMs;
  }
  
  /**
   * Marca um usu√°rio como saudado
   * @param {string} userId - ID do usu√°rio
   */
  async markAsGreeted(userId) {
    this.greetedUsers[userId] = Date.now();
    await this.saveGreetedUsers();
  }
  
  /**
   * L√™ o texto de sauda√ß√£o do arquivo
   * @returns {Promise<string>} - O texto de sauda√ß√£o
   */
  async getGreetingText() {
    try {
      // Criar o diret√≥rio 'textos' se n√£o existir
      const textosDir = path.join(this.database.databasePath, 'textos');
      await fs.mkdir(textosDir, { recursive: true }).catch(() => {});
      
      // Verificar se o arquivo de sauda√ß√£o existe
      try {
        await fs.access(this.greetingTextPath);
      } catch (error) {
        // Se o arquivo n√£o existir, cria com um texto padr√£o
        const defaultGreeting = `ü¶á *Ol√°! Eu sou a Ravena!* ü¶á\n\nSou uma bot de WhatsApp com v√°rias fun√ß√µes √∫teis!\n\nDigite *!cmd* para ver todos os comandos dispon√≠veis. Aqui no privado, voc√™ pode:\n\n‚Ä¢ Enviar √°udios e eu farei a transcri√ß√£o automaticamente\n‚Ä¢ Enviar imagens/v√≠deos e eu crio figurinhas pra voc√™\n‚Ä¢ Utilizar comandos de texto para voz como *!tts* seguido do texto\n\n√â poss√≠vel tamb√©m me adicionar em grupos! üòâ`;
        
        await fs.writeFile(this.greetingTextPath, defaultGreeting);
        this.logger.info('Arquivo de sauda√ß√£o criado com texto padr√£o');
        return defaultGreeting;
      }
      
      // Ler o arquivo de sauda√ß√£o
      const greeting = await fs.readFile(this.greetingTextPath, 'utf8');
      return greeting;
    } catch (error) {
      this.logger.error('Erro ao obter texto de sauda√ß√£o:', error);
      return "ü¶á Ol√°! Eu sou a Ravena, um bot de WhatsApp. Digite !cmd para ver os comandos dispon√≠veis.";
    }
  }
  
  /**
   * Processa a sauda√ß√£o para um usu√°rio
   * @param {WhatsAppBot} bot - Inst√¢ncia do bot
   * @param {Object} message - A mensagem do usu√°rio
   * @returns {Promise<boolean>} - Se a sauda√ß√£o foi enviada
   */
  async processGreeting(bot, message) {
    try {
      // Verificar se a mensagem √© de chat privado
      if (message.group) {
        return false;
      }
      
      const userId = message.author;
      
      // Verificar se o usu√°rio j√° foi saudado recentemente
      if (this.wasGreetedRecently(userId)) {
        this.logger.debug(`Usu√°rio ${userId} j√° foi saudado recentemente`);
        return false;
      } else {
        this.logger.debug(`Usu√°rio ${userId} ser√° saudado!`);
      }
      
      // Obter o texto de sauda√ß√£o
      const greetingText = await this.getGreetingText();
      
      // Enviar a sauda√ß√£o
      await bot.sendMessage(userId, greetingText);
      
      // Marcar o usu√°rio como saudado
      await this.markAsGreeted(userId);
      
      this.logger.info(`Sauda√ß√£o enviada para ${userId}`);
      return true;
    } catch (error) {
      this.logger.error('Erro ao processar sauda√ß√£o:', error);
      return false;
    }
  }
}

// Inst√¢ncia √∫nica
let instance = null;

module.exports = {
  getInstance: () => {
    if (!instance) {
      instance = new UserGreetingManager();
    }
    return instance;
  }
};